// <auto-generated />
using System;
using System.Text.Json;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(ESGDbContext))]
    [Migration("20250808100502_InitialFrameworkMigration")]
    partial class InitialFrameworkMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Framework.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_code");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_categories_sort_order");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Backend.Models.Framework.DataSourceMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("FrameworkId")
                        .HasColumnType("uuid")
                        .HasColumnName("framework_id");

                    b.Property<JsonDocument>("MappingConfig")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("mapping_config");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source_type");

                    b.HasKey("Id");

                    b.HasIndex("FrameworkId")
                        .HasDatabaseName("ix_data_source_mappings_framework");

                    b.HasIndex("SourceType")
                        .HasDatabaseName("ix_data_source_mappings_source_type");

                    b.ToTable("data_source_mappings");
                });

            modelBuilder.Entity("Backend.Models.Framework.ESGFramework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("source_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveDate")
                        .HasDatabaseName("ix_frameworks_effective_date");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_frameworks_is_active");

                    b.HasIndex("Code", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_frameworks_code_version");

                    b.ToTable("frameworks");
                });

            modelBuilder.Entity("Backend.Models.Framework.FrameworkSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FrameworkId")
                        .HasColumnType("uuid")
                        .HasColumnName("framework_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_section_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("ParentSectionId")
                        .HasDatabaseName("ix_framework_sections_parent");

                    b.HasIndex("FrameworkId", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_framework_sections_framework_code");

                    b.HasIndex("FrameworkId", "SortOrder")
                        .HasDatabaseName("ix_framework_sections_sort_order");

                    b.ToTable("framework_sections");
                });

            modelBuilder.Entity("Backend.Models.Framework.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_industries_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_industries_is_active");

                    b.ToTable("industries");
                });

            modelBuilder.Entity("Backend.Models.Framework.IndustryMetricVariation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid")
                        .HasColumnName("industry_id");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<string>("OverrideFormula")
                        .HasColumnType("text")
                        .HasColumnName("override_formula");

                    b.Property<JsonDocument>("OverrideValidation")
                        .HasColumnType("jsonb")
                        .HasColumnName("override_validation");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .HasDatabaseName("ix_industry_metric_variations_industry");

                    b.HasIndex("MetricId")
                        .HasDatabaseName("ix_industry_metric_variations_metric");

                    b.HasIndex("IndustryId", "MetricId")
                        .IsUnique()
                        .HasDatabaseName("ix_industry_metric_variations_unique");

                    b.ToTable("industry_metric_variations");
                });

            modelBuilder.Entity("Backend.Models.Framework.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Formula")
                        .HasColumnType("text")
                        .HasColumnName("formula");

                    b.Property<Guid>("FrameworkId")
                        .HasColumnType("uuid")
                        .HasColumnName("framework_id");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_metrics_category");

                    b.HasIndex("IsCalculated")
                        .HasDatabaseName("ix_metrics_is_calculated");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_metrics_section");

                    b.HasIndex("FrameworkId", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_metrics_framework_code");

                    b.ToTable("metrics");
                });

            modelBuilder.Entity("Backend.Models.Framework.MetricDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DependentMetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("dependent_metric_id");

                    b.Property<Guid>("SourceMetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_metric_id");

                    b.HasKey("Id");

                    b.HasIndex("DependentMetricId")
                        .HasDatabaseName("ix_metric_dependencies_dependent");

                    b.HasIndex("SourceMetricId")
                        .HasDatabaseName("ix_metric_dependencies_source");

                    b.HasIndex("DependentMetricId", "SourceMetricId")
                        .IsUnique()
                        .HasDatabaseName("ix_metric_dependencies_unique");

                    b.ToTable("metric_dependencies");
                });

            modelBuilder.Entity("Backend.Models.Framework.MetricValidationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("max_value");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("min_value");

                    b.Property<string>("Pattern")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pattern");

                    b.HasKey("Id");

                    b.HasIndex("MetricId")
                        .HasDatabaseName("ix_metric_validation_rules_metric");

                    b.ToTable("metric_validation_rules");
                });

            modelBuilder.Entity("Backend.Models.Framework.DataSourceMapping", b =>
                {
                    b.HasOne("Backend.Models.Framework.ESGFramework", "Framework")
                        .WithMany("DataSourceMappings")
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("Backend.Models.Framework.FrameworkSection", b =>
                {
                    b.HasOne("Backend.Models.Framework.ESGFramework", "Framework")
                        .WithMany("Sections")
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Framework.FrameworkSection", "ParentSection")
                        .WithMany("ChildSections")
                        .HasForeignKey("ParentSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Framework");

                    b.Navigation("ParentSection");
                });

            modelBuilder.Entity("Backend.Models.Framework.IndustryMetricVariation", b =>
                {
                    b.HasOne("Backend.Models.Framework.Industry", "Industry")
                        .WithMany("MetricVariations")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Framework.Metric", "Metric")
                        .WithMany("IndustryVariations")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Backend.Models.Framework.Metric", b =>
                {
                    b.HasOne("Backend.Models.Framework.Category", "Category")
                        .WithMany("Metrics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Framework.ESGFramework", "Framework")
                        .WithMany("Metrics")
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Framework.FrameworkSection", "Section")
                        .WithMany("Metrics")
                        .HasForeignKey("SectionId");

                    b.Navigation("Category");

                    b.Navigation("Framework");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Backend.Models.Framework.MetricDependency", b =>
                {
                    b.HasOne("Backend.Models.Framework.Metric", "DependentMetric")
                        .WithMany("DependentMetrics")
                        .HasForeignKey("DependentMetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Framework.Metric", "SourceMetric")
                        .WithMany("SourceMetrics")
                        .HasForeignKey("SourceMetricId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependentMetric");

                    b.Navigation("SourceMetric");
                });

            modelBuilder.Entity("Backend.Models.Framework.MetricValidationRule", b =>
                {
                    b.HasOne("Backend.Models.Framework.Metric", "Metric")
                        .WithMany("ValidationRules")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Backend.Models.Framework.Category", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("Backend.Models.Framework.ESGFramework", b =>
                {
                    b.Navigation("DataSourceMappings");

                    b.Navigation("Metrics");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Backend.Models.Framework.FrameworkSection", b =>
                {
                    b.Navigation("ChildSections");

                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("Backend.Models.Framework.Industry", b =>
                {
                    b.Navigation("MetricVariations");
                });

            modelBuilder.Entity("Backend.Models.Framework.Metric", b =>
                {
                    b.Navigation("DependentMetrics");

                    b.Navigation("IndustryVariations");

                    b.Navigation("SourceMetrics");

                    b.Navigation("ValidationRules");
                });
#pragma warning restore 612, 618
        }
    }
}
